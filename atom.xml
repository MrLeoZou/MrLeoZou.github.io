<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MrLeoZou</title>
  
  <subtitle>iOS开发者,大前端学习者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-11T02:49:33.565Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MrLeoZou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS开发中的各种锁</title>
    <link href="http://yoursite.com/2017/12/11/iOS%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E9%94%81/"/>
    <id>http://yoursite.com/2017/12/11/iOS开发中的各种锁/</id>
    <published>2017-12-11T01:47:05.000Z</published>
    <updated>2017-12-11T02:49:33.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>平常项目开发中需要手动加锁的地方少之又少，而且一般是简单粗暴使用@synchronized搞定，不过打算封装框架时就会发现远不满足。本文的目的是希望站在iOS开发中锁的使用之上的层面分析，探讨各种加锁方式的大致实现原理以及它们之间的区别和性能对比。由于加锁必然涉及到多线程相关知识，所以本文涉猎的知识点可能较多，本着相互学习探讨的心态，希望大家多多指正。</p><p>首先借鉴一张ibireme各种锁性能对比图镇楼，同时也是我们本文的叙述脉络：</p><p><img src="/2017/12/11/iOS开发中的各种锁/lock_01.png" alt="来源：ibireme"><br>上图，Y轴从下到上性能越来越来，越来越接近底层，平时使用也越来越少o(╯□╰)o。接下来我们将从我们最熟悉的@synchronized说起，逐步深入，步步为营。</p><hr><p>在开始分析之前，有几个概念需要先拎出来溜溜，方便后文理解。</p><h2 id="时间片轮转调度算法"><a href="#时间片轮转调度算法" class="headerlink" title="时间片轮转调度算法"></a>时间片轮转调度算法</h2><p> <a href="http://baike.baidu.com/view/3186651.htm" target="_blank" rel="noopener">时间片轮转调度算法</a><br>这是目前操作系统中大量使用的线程管理方式，大致就是操作系统会给每个线程分配一段时间片（通常100ms左右）这些线程都被放在一个队列中，cpu只需要维护这个队列，当队首的线程时间片耗尽就会被强制放到队尾等待，然后提取下一个队首线程执行。</p><hr><h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><p>“原子”：一般指最小粒度，不可分割；原子操作也就是不可分割，不可中断的操作。我们最重要是知道这个概念，至于具体实现就不在本文的讨论范围。可以参考以下文章：<br><a href="http://www.jianshu.com/p/cb7b726e943c" target="_blank" rel="noopener">原子操作01</a><br><a href="http://southpeak.github.io/2014/10/17/osatomic-operation/" target="_blank" rel="noopener">原子操作02</a><br>至此，我们正式进入iOS开发中各种锁的探讨。</p><hr><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="@synchronized"></a>@synchronized</h2><p>显然，这是我们最熟悉的加锁方式，因为这是OC层面的为我们封装的，使用起来简单粗暴。使用时 @synchronized 后面需要紧跟一个 OC 对象，它实际上是把这个对象当做锁来使用。这是通过一个哈希表来实现的，OC 在底层使用了一个互斥锁的数组(也就是锁池)，通过对对象去哈希值来得到对应的互斥锁。<br>对于@synchronized更深入的实现理解，这里<a href="http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/" target="_blank" rel="noopener">@synchronized</a>会有更好的答案。</p><hr><h2 id="OSSpinLock-自旋锁"><a href="#OSSpinLock-自旋锁" class="headerlink" title="OSSpinLock 自旋锁"></a>OSSpinLock 自旋锁</h2><p>首选作为效率最优选择的OSSpinLock是自旋锁，在 bireme 的<a href="http://blog.ibireme.com/2016/01/16/spinlock_is_unsafe_in_ios/" target="_blank" rel="noopener">不再安全的OSSpinLock</a>文中，已经指出潜在的bug：优先级反转，因此目前不建议使用。<a href="http://baike.baidu.com/link?url=T9Im_xVyniC5SdvZVH1Y1iEgkFhcjGm-Hnme803oWgRi3vZa1JVMy-RsljCPDuvPiOcWIrrUedw7CLYRjqhWtuO4CLSgugUUPoHrCKsB-T2GNionyGgXYRUaJ43joO6ZeGGvxIDsW6s2ham_x1vkv_" target="_blank" rel="noopener">什么是优先级反转？</a><br>自旋锁的目的是为了确保临界区只有一个线程可以访问，自旋锁的实现思路很简单，理论上来说只要定义一个全局变量，用来表示锁的可用情况即可，自旋锁是使用忙等机制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool lock = false; // 一开始没有锁上，任何线程都可以申请锁</span><br><span class="line">do &#123;</span><br><span class="line">while(test_and_set(&amp;lock); // test_and_set 是一个原子操作</span><br><span class="line">Critical section  // 临界区</span><br><span class="line">lock = false; // 相当于释放锁，这样别的线程可以进入临界区</span><br><span class="line">Reminder section // 不需要锁保护的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果临界区的执行时间过长，不建议使用自旋锁，因为在 while 循环中，线程处于忙等状态，白白浪费 CPU 时间，最终因为超时被操作系统抢占时间片。</p><hr><h2 id="dispatch-semaphore-信号量"><a href="#dispatch-semaphore-信号量" class="headerlink" title="dispatch_semaphore  信号量"></a>dispatch_semaphore  信号量</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p><strong>dispatch_semaphore_create(1)：</strong>传入值必须&gt;=0, 若传入为0则阻塞线程并等待timeout,时间到后会执行其后的语句<br><strong>dispatch_semaphore_wait(signal, overTime)：</strong>可以理解为lock,会使得signal值-1<br><strong>dispatch_semaphore_signal(signal)：</strong>可以理解为unlock,会使得signal值+1</p></blockquote><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><blockquote><p>停车场剩余4个车位，那么即使同时来了四辆车也能停的下。如果此时来了五辆车，那么就有一辆需要等待。<br><strong>信号量的值（signal）</strong>就相当于剩余车位的数目，dispatch_semaphore_wait函数就相当于来了一辆车，dispatch_semaphore_signal就相当于走了一辆车。停车位的剩余数目在初始化的时候就已经指明了（dispatch_semaphore_create（long value）），调用一次 dispatch_semaphore_signal，剩余的车位就增加一个；调用一次dispatch_semaphore_wait 剩余车位就减少一个；当剩余车位为 0 时，再来车（即调用 dispatch_semaphore_wait）就只能等待。有可能同时有几辆车等待一个停车位。有些车主没有耐心，给自己设定了一段等待时间，这段时间内等不到停车位就走了，如果等到了就开进去停车。而有些车主就像把车停在这，所以就一直等下去。</p></blockquote><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>参考<a href="https://bestswifter.com/deep-gcd/" target="_blank" rel="noopener">介绍 GCD 底层实现的文章</a>中简单描述了信号量 dispatch_semaphore_t 的实现原理，它最终会调用到 sem_wait 方法，这个方法在 <a href="http://www.gnu.org/software/libc/" target="_blank" rel="noopener">glibc</a> 中被实现如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int sem_wait (sem_t *sem) &#123;</span><br><span class="line">  int *futex = (int *) sem;</span><br><span class="line">  if (atomic_decrement_if_positive (futex) &gt; 0)</span><br><span class="line">    return 0;</span><br><span class="line">  int err = lll_futex_wait (futex, 0);</span><br><span class="line">    return -1;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><blockquote><p>首先会把信号量的值减一，并判断是否大于零。如果大于零，说明不用等待，所以立刻返回。具体的等待操作在lll_futex_wait<br>函数中实现，<strong>lll</strong> 是 low level lock 的简称。这个函数通过汇编代码实现，调用到SYS_futex<br>这个系统调用，使线程进入睡眠状态，主动让出时间片，这个函数在互斥锁的实现中，也有可能被用到。<br>主动让出时间片并不总是代表效率高。让出时间片会导致操作系统切换到另一个线程，这种上下文切换通常需要 10 微秒左右，而且至少需要两次切换。如果等待时间很短，比如只有几个微秒，忙等就比线程睡眠更高效。<br>可以看到，自旋锁和信号量的实现都非常简单，这也是两者的加解锁耗时分别排在第一和第二的原因。再次强调，加解锁耗时不能准确反应出锁的效率(比如时间片切换就无法发生)，它只能从一定程度上衡量锁的实现复杂程度。</p></blockquote><h2 id="pthread-mutex-互斥锁"><a href="#pthread-mutex-互斥锁" class="headerlink" title="pthread_mutex 互斥锁"></a>pthread_mutex 互斥锁</h2><p>pthread 表示 POSIX thread，定义了一组跨平台的线程相关的 API，pthread_mutex 表示互斥锁。互斥锁的实现原理与信号量非常相似，不是使用忙等，而是阻塞线程并睡眠，需要进行上下文切换。</p><h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutexattr_t attr;</span><br><span class="line">pthread_mutexattr_init(&amp;attr);</span><br><span class="line">pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_NORMAL);  // 定义锁的属性</span><br><span class="line"></span><br><span class="line">pthread_mutex_t mutex;</span><br><span class="line">pthread_mutex_init(&amp;mutex, &amp;attr) // 创建锁</span><br><span class="line">pthread_mutex_lock(&amp;mutex); // 申请锁</span><br><span class="line">    // 临界区</span><br><span class="line">pthread_mutex_unlock(&amp;mutex); // 释放锁</span><br></pre></td></tr></table></figure><h3 id="互斥锁的实现"><a href="#互斥锁的实现" class="headerlink" title="互斥锁的实现"></a>互斥锁的实现</h3><blockquote><p>互斥锁在申请锁时，调用了 pthread_mutex_lock 方法，它在不同的系统上实现各有不同，有时候它的内部是使用信号量来实现，即使不用信号量，也会调用到 lll_futex_wait 函数，从而导致线程休眠。<br>上文说到如果临界区很短，忙等的效率也许更高，所以在有些版本的实现中，会首先尝试一定次数(比如 1000 次)的 test_and_test，这样可以在错误使用互斥锁时提高性能。</p></blockquote><hr><h2 id="pthread-mutex-recursive-递归锁"><a href="#pthread-mutex-recursive-递归锁" class="headerlink" title="pthread_mutex(recursive)  递归锁"></a>pthread_mutex(recursive)  递归锁</h2><p>一般情况下，一个线程只能申请一次锁，也只能在获得锁的情况下才能释放锁，多次申请锁或释放未获得的锁都会导致崩溃。假设在已经获得锁的情况下再次申请锁，线程会因为等待锁的释放而进入睡眠状态，因此就不可能再释放锁，从而导致死锁。<br>然而这种情况经常会发生，比如某个函数申请了锁，在临界区内又递归调用了自己，由此也就引出了递归锁：<strong>允许同一个线程在未释放其拥有的锁时反复对该锁进行加锁操作。</strong></p><p>递归锁的使用和pthread_mutex很类似，主要就是要设置锁的类型为PTHREAD_MUTEX_RECURSIVE即可。</p><blockquote><p>由于 pthread_mutex 有多种类型，可以支持递归锁等，因此在申请加锁时，需要对锁的类型加以判断，这也就是为什么它和信号量的实现类似，但效率略低的原因。</p></blockquote><hr><h2 id="NSLock"><a href="#NSLock" class="headerlink" title="NSLock"></a>NSLock</h2><p>NSLock 是 Objective-C 以对象的形式暴露给开发者的一种锁，它的实现非常简单，通过宏，定义了 lock 方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define    MLOCK \</span><br><span class="line">- (void) lock\</span><br><span class="line">&#123;\</span><br><span class="line">  int err = pthread_mutex_lock(&amp;_mutex);\</span><br><span class="line">  // 错误处理 ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>NSLock只是在内部封装了一个pthread_mutex，属性为PTHREAD_MUTEX_ERRORCHECK，它会损失一定性能换来错误提示。这里使用宏定义的原因是，OC 内部还有其他几种锁，他们的 lock 方法都是一模一样，仅仅是内部pthread_mutex互斥锁的类型不同。通过宏定义，可以简化方法的定义。<br>NSLock比pthread_mutex略慢的原因在于它需要经过方法调用，同时由于缓存的存在，多次方法调用不会对性能产生太大的影响。</p><hr><h2 id="NSRecursiveLock-递归锁"><a href="#NSRecursiveLock-递归锁" class="headerlink" title="NSRecursiveLock 递归锁"></a>NSRecursiveLock 递归锁</h2><p>前文我们已经介绍过，递归锁也是通过 pthread_mutex_lock 函数来实现，在函数内部会判断锁的类型。NSRecursiveLock 与 NSLock 的区别在于内部封装的 pthread_mutex_t 对象的类型不同，前者的类型为 PTHREAD_MUTEX_RECURSIVE。</p><hr><h2 id="NSConditionLock-条件锁"><a href="#NSConditionLock-条件锁" class="headerlink" title="NSConditionLock 条件锁"></a>NSConditionLock 条件锁</h2><p>NSCondition的底层是通过条件变量(condition variable)pthread_cond_t来实现的。条件变量有点像信号量，提供了线程阻塞与信号机制，因此可以用来阻塞某个线程，并等待某个数据就绪，随后唤醒线程，比如常见的生产者-消费者模式。<a href="https://zh.wikipedia.org/wiki/生产者消费者问题" target="_blank" rel="noopener">关于生产者消费者问题</a></p><h3 id="条件变量使用"><a href="#条件变量使用" class="headerlink" title="条件变量使用"></a>条件变量使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void consumer () &#123; // 消费者</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    while (data == NULL) &#123;</span><br><span class="line">        pthread_cond_wait(&amp;condition_variable_signal, &amp;mutex); // 等待数据</span><br><span class="line">    &#125;</span><br><span class="line">    // --- 有新的数据，以下代码负责处理 ↓↓↓↓↓↓</span><br><span class="line">    // temp = data;</span><br><span class="line">    // --- 有新的数据，以上代码负责处理 ↑↑↑↑↑↑</span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void producer () &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    // 生产数据</span><br><span class="line">    pthread_cond_signal(&amp;condition_variable_signal); // 发出信号给消费者，告诉他们有了新的数据</span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“如果不用互斥锁，只用条件变量会有什么问题呢？”。问题在于，temp = data; 这段代码不是线程安全的，也许在你把 data 读出来以前，已经有别的线程修改了数据。因此我们需要保证消费者拿到的数据是线程安全的。</p><h3 id="这也就是NSCondition的实现原理："><a href="#这也就是NSCondition的实现原理：" class="headerlink" title="这也就是NSCondition的实现原理："></a>这也就是NSCondition的实现原理：</h3><p>NSCondition 其实是封装了一个互斥锁和条件变量， 它把前者的 lock 方法和后者的 wait/signal 统一在 NSCondition 对象中，暴露给使用者。NSCondition的加解锁过程与 NSLock 几乎一致，理论上来说耗时也应该一样(实际测试也是如此)。在图中显示它耗时略长，有可能是测试者在每次加解锁的前后还附带了变量的初始化和销毁操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (void) signal &#123;</span><br><span class="line">  pthread_cond_signal(&amp;_condition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 其实这个函数是通过宏来定义的，展开后就是这样</span><br><span class="line">- (void) lock &#123;</span><br><span class="line">  int err = pthread_mutex_lock(&amp;_mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="NSConditionLock是通过NSCondition实现的"><a href="#NSConditionLock是通过NSCondition实现的" class="headerlink" title="NSConditionLock是通过NSCondition实现的"></a>NSConditionLock是通过NSCondition实现的</h3><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">NSConditionLock *cLock = [[NSConditionLock alloc] initWithCondition:0];</span><br><span class="line"></span><br><span class="line">//线程1</span><br><span class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">    if([cLock tryLockWhenCondition:0])&#123;</span><br><span class="line">        NSLog(@&quot;线程1&quot;);</span><br><span class="line">       [cLock unlockWithCondition:1];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">         NSLog(@&quot;失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//线程2</span><br><span class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">    [cLock lockWhenCondition:3];</span><br><span class="line">    NSLog(@&quot;线程2&quot;);</span><br><span class="line">    [cLock unlockWithCondition:2];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//线程3</span><br><span class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">    [cLock lockWhenCondition:1];</span><br><span class="line">    NSLog(@&quot;线程3&quot;);</span><br><span class="line">    [cLock unlockWithCondition:3];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>我们在初始化 NSConditionLock 对象时，给了他的标示为0<br> 执行tryLockWhenCondition:时，我们传入的条件标示也是0,所 <strong>以线程1</strong> 加锁成功<br>执行unlockWithCondition:时，<strong>这时候会把condition由0修改为1<br>因为condition修改为了1， 会先走到 </strong>线程3<strong>，然后 </strong>线程3<strong> 又将condition修改为3<br>最后 走了 </strong>线程2** 的流程</p></blockquote><h3 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h3><p>NSConditionLock 借助 NSCondition 来实现，它的本质就是一个生产者-消费者模型。“条件被满足”可以理解为生产者提供了新的内容。NSConditionLock 的内部持有一个 NSCondition 对象，以及 _condition_value 属性，在初始化时就会对这个属性进行赋值:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 模拟代码</span><br><span class="line">- (id) initWithCondition: (NSInteger)value &#123;</span><br><span class="line">    if (nil != (self = [super init])) &#123;</span><br><span class="line">        _condition = [NSCondition new]</span><br><span class="line">        _condition_value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它的 lockWhenCondition 方法其实就是消费者方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void) lockWhenCondition: (NSInteger)value &#123;</span><br><span class="line">    [_condition lock];</span><br><span class="line">    while (value != _condition_value) &#123;</span><br><span class="line">        [_condition wait];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对应的 unlockWhenCondition 方法则是生产者，使用了 broadcast 方法通知了所有的消费者:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void) unlockWithCondition: (NSInteger)value &#123;</span><br><span class="line">    _condition_value = value;</span><br><span class="line">    [_condition broadcast];</span><br><span class="line">    [_condition unlock];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>  至此，本文已经对iOS开发中常用的8种锁对了简单的探讨和学习，有几个关键点需要强调的<br>（1）加解锁速度不表示锁的效率，只表示加解锁操作在执行时的复杂程度，因为还需要考虑时间片切换耗时等因素<br>（2）实际开发中，并不是总要选择性能最好的锁来实现，需要根据业务需求和开发成本，代码维护等方面综合选择，这也是@synchronized和NSLock的原因。<br>（3）关于死锁的理解，受文章篇幅影响，暂不分析，可以参考:<a href="http://www.superqq.com/blog/2015/10/16/five-case-know-gcd/" target="_blank" rel="noopener">关于死锁</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;平常项目开发中需要手动加锁的地方少之又少，而且一般是简单粗暴使用@synchronized搞定，不过打算封装框架时就会发现远不满足。本文的目
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/12/04/hello-world/"/>
    <id>http://yoursite.com/2017/12/04/hello-world/</id>
    <published>2017-12-04T09:20:49.676Z</published>
    <updated>2017-12-04T09:20:49.676Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
